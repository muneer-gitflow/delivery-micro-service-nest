version: '3.8'

services:
  api:
    build:
      context: ./
      dockerfile: ./apps/api/Dockerfile
    ports:
      - '3000:3000'
    env_file:
      - .env
    volumes:
      - .:/usr/src/app # any change to base folder should be reflected
      - /usr/src/app/node_modules
    command: npx pnpm run start:dev api
    depends_on:
      - kafka
      - redis
      - postgres
    networks:
      - app-network
    labels:
      - "prometheus_scrape_enabled=true"
      - "prometheus_scrape_port=3000"

  customer:
    build:
      context: ./
      dockerfile: ./apps/customer/Dockerfile
    env_file:
      - .env
    volumes:
      - .:/usr/src/app # any change to base folder should be reflected
      - /usr/src/app/node_modules
    command: npx pnpm run start:dev customer
    networks:
      - app-network
    labels:
      - "prometheus_scrape_enabled=true"
      - "prometheus_scrape_port=3000"

  delivery:
    build:
      context: ./
      dockerfile: ./apps/delivery/Dockerfile
    env_file:
      - .env
    volumes:
      - .:/usr/src/app # any change to base folder should be reflected
      - /usr/src/app/node_modules
    command: npx pnpm run start:dev delivery
    networks:
      - app-network
    labels:
      - "prometheus_scrape_enabled=true"
      - "prometheus_scrape_port=3000"

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - app-network

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: delivery_service
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3001:3000"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
